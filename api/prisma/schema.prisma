// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  username  String  @unique
  email     String  @unique
  password  String
  avatar    String?
  userAbout String?

  conversations Conversation[] @relation("UserConversations")
  messages      Message[]
  groups        Group[]        @relation("UserGroups")

  createdGroups Group[] @relation("CreatedGroups")

  favorites     FavoriteConversation[]
  notifications Notification[]
  joinRequest   JoinRequest[]

  createdAt DateTime @default(now())

  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isGroup  Boolean
  lastSeen DateTime?

  group   Group?  @relation("GroupConversation")
  groupId String?

  users    User[]    @relation("UserConversations")
  messages Message[]

  favorites FavoriteConversation[]

  @@map("conversations")
}

model Group {
  id               String   @id @default(cuid())
  name             String
  passkey          String   @unique
  groupDescription String?
  createdAt        DateTime @default(now())

  adminId String
  admin   User   @relation("CreatedGroups", fields: [adminId], references: [id])

  conversation   Conversation @relation("GroupConversation", fields: [conversationId], references: [id])
  conversationId String       @unique

  users       User[]        @relation("UserGroups")
  joinRequest JoinRequest[]

  @@map("groups")
}

model Message {
  id      String  @id @default(cuid())
  content String?
  fileUrl String?

  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model FavoriteConversation {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  @@unique([userId, conversationId])
  @@map("favorite_conversations")
}

model Notification {
  id      String  @id @default(cuid())
  content String
  isRead  Boolean

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("notifications")
}

model JoinRequest {
  id     String            @id @default(cuid())
  status JoinRequestStatus @default(PENDING)

  passkey String
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())

  @@map("join_requests")
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
